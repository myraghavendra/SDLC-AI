# .github/workflows/test-backend.yml
name: Test Backend (Python/FastAPI)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/test-backend.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Debug - List files
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Backend directory contents:"
          ls -la src/backend_py/ || echo "src/backend_py/ not found"
          echo "Python files:"
          find . -name "*.py" -type f

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Check for requirements.txt in different locations
          if [ -f src/backend_py/requirements.txt ]; then
            echo "Installing from src/backend_py/requirements.txt"
            pip install -r src/backend_py/requirements.txt
          elif [ -f requirements.txt ]; then
            echo "Installing from root requirements.txt"
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing basic FastAPI dependencies"
            pip install fastapi uvicorn python-dotenv
          fi
          pip install pytest httpx  # For testing

      - name: Create test .env file
        run: |
          # Create .env in backend directory
          mkdir -p src/backend_py
          echo "OPENAI_API_KEY=test_key_for_ci" >> src/backend_py/.env
          echo "JIRA_API_TOKEN=test_token" >> src/backend_py/.env
          echo "JIRA_PROJECT_KEY=TEST" >> src/backend_py/.env
          echo "JIRA_URL=https://test.atlassian.net" >> src/backend_py/.env
          echo "JIRA_USER=test@example.com" >> src/backend_py/.env

      - name: Fix Python imports
        run: |
          echo "Setting up Python path for proper imports..."
          
          # Add the project root to PYTHONPATH so 'src' module can be found
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          echo "PYTHONPATH=${GITHUB_WORKSPACE}:${PYTHONPATH}" >> $GITHUB_ENV
          
          # Also add an __init__.py to src if it doesn't exist
          touch src/__init__.py
          touch src/backend_py/__init__.py
          
          echo "Python path setup complete"

      - name: Validate main.py exists and imports
        run: |
          echo "✅ Validating main.py imports from project root..."
          
          if [ ! -f src/backend_py/main.py ]; then
            echo "❌ main.py not found in src/backend_py/!"
            echo "Available files in src/backend_py/:"
            ls -la src/backend_py/
            echo "Available Python files:"
            find . -name "*.py" -type f
            exit 1
          fi
          
          echo "✅ main.py found, checking if it can be imported..."
          
          # Test import from project root (not from within backend_py directory)
          python -c "
          import sys
          import os
          print(f'Current working directory: {os.getcwd()}')
          print(f'Python path: {sys.path}')
          
          try:
              # Import from the correct path
              sys.path.insert(0, 'src/backend_py')
              import main
              print('✅ main.py imports successfully')
              if hasattr(main, 'app'):
                  print('✅ FastAPI app found in main.py')
              else:
                  print('⚠️  No app variable found in main.py - checking for server import')
                  try:
                      from server import app as server_app
                      print('✅ FastAPI app found via server import')
                  except ImportError as e:
                      print(f'❌ Could not find app: {e}')
          except Exception as e:
              print(f'❌ Import error: {e}')
              import traceback
              traceback.print_exc()
              exit(1)
          "

      - name: Test backend startup
        run: |
          echo "Starting FastAPI server from project root..."
          
          # Start the server from project root with proper module path
          cd src/backend_py
          uvicorn main:app --host 0.0.0.0 --port 8000 --log-level info &
          SERVER_PID=$!
          
          echo "Server PID: $SERVER_PID"
          
          # Wait for server to start with timeout
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Server is responding after ${i} seconds"
              break
            elif [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 30 seconds"
              echo "Checking server process:"
              ps aux | grep uvicorn || echo "No uvicorn process found"
              echo "Checking server logs (if any):"
              jobs -l
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 1
          done
          
          # Test health endpoint
          echo "Testing health endpoint..."
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/health)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "Response body: $BODY"
          echo "HTTP status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Health check failed with status $HTTP_CODE"
            echo "Trying to get more error information:"
            curl -v http://localhost:8000/health || true
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          echo "✅ Backend is working correctly!"
          
          # Test additional endpoints if they exist
          echo "Testing root endpoint..."
          curl -s -f http://localhost:8000/ > /dev/null 2>&1 && echo "✅ Root endpoint OK" || echo "⚠️  Root endpoint not available"
          
          # Test docs endpoint
          echo "Testing docs endpoint..."
          curl -s -f http://localhost:8000/docs > /dev/null 2>&1 && echo "✅ Docs endpoint OK" || echo "⚠️  Docs endpoint not available"
          
          # Clean up
          echo "Stopping server..."
          kill $SERVER_PID 2>/dev/null || true
          wait $SERVER_PID 2>/dev/null || true
          echo "✅ Server stopped"
          
        env:
          OPENAI_API_KEY: "test_key_for_ci"
          JIRA_API_TOKEN: "test_token"
          JIRA_PROJECT_KEY: "TEST"
          JIRA_URL: "https://test.atlassian.net"
          JIRA_USER: "test@example.com"

      - name: Run tests (if you have them)
        run: |
          if [ -d "src/backend_py/tests" ] && [ "$(find src/backend_py/tests -name "*.py" | wc -l)" -gt 0 ]; then
            echo "Running pytest tests from project root..."
            cd src/backend_py
            pytest tests/ -v
          elif [ -f "src/backend_py/test_main.py" ]; then
            echo "Running test_main.py..."
            cd src/backend_py
            pytest test_main.py -v
          else
            echo "No tests found in src/backend_py/. Consider adding tests:"
            echo "src/backend_py/tests/"
            echo "├── __init__.py"
            echo "├── test_main.py"
            echo "└── test_api.py"
            echo ""
            echo "Example test structure:"
            echo "# test_main.py"
            echo "from fastapi.testclient import TestClient"
            echo "from main import app"
            echo ""
            echo "client = TestClient(app)"
            echo ""
            echo "def test_health_endpoint():"
            echo "    response = client.get('/health')"
            echo "    assert response.status_code == 200"
          fi

      # Optional: Add a step to suggest import fixes
      - name: Import troubleshooting (on failure)
        if: failure()
        run: |
          echo "🔧 Import troubleshooting suggestions:"
          echo ""
          echo "The most common issue is relative imports. Here are the fixes:"
          echo ""
          echo "1. In get_stories_api.py, change:"
          echo "   from src.backend_py.jira_client import ..."
          echo "   to:"
          echo "   from jira_client import ..."
          echo ""
          echo "2. Or add project root to Python path in main.py:"
          echo "   import sys"
          echo "   import os"
          echo "   sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))"
          echo ""
          echo "3. Or use relative imports:"
          echo "   from .jira_client import ..."
          echo ""
          echo "Current file structure:"
          find . -name "*.py" -type f | head -10